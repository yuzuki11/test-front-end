version: '3.1'

services:
<<<<<<< Updated upstream
  database:
    restart: always
    image: postgres:latest
    privileged: true
    ports:
    - 5432:5432
    environment:
      POSTGRES_PASSWORD: test
=======
   database:
     restart: always
     image: postgres:latest
     privileged: true
     ports:
       - 5433:5433
     environment:
        POSTGRES_PASSWORD: test
>>>>>>> Stashed changes

  minio1:
    image: minio/minio:RELEASE.2020-04-02T21-34-49Z
    volumes:
    - data1-1:/data1
    - data1-2:/data2
    ports:
    - "9001:9000"
    environment:
      MINIO_ACCESS_KEY: minio
      MINIO_SECRET_KEY: minio123
    command: server http://minio{1...4}/data{1...2}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  minio2:
    image: minio/minio:RELEASE.2020-04-02T21-34-49Z
    volumes:
    - data2-1:/data1
    - data2-2:/data2
    ports:
    - "9002:9000"
    environment:
      MINIO_ACCESS_KEY: minio
      MINIO_SECRET_KEY: minio123
    command: server http://minio{1...4}/data{1...2}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  minio3:
    image: minio/minio:RELEASE.2020-04-02T21-34-49Z
    volumes:
    - data3-1:/data1
    - data3-2:/data2
    ports:
    - "9003:9000"
    environment:
      MINIO_ACCESS_KEY: minio
      MINIO_SECRET_KEY: minio123
    command: server http://minio{1...4}/data{1...2}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  minio4:
    image: minio/minio:RELEASE.2020-04-02T21-34-49Z
    volumes:
    - data4-1:/data1
    - data4-2:/data2
    ports:
    - "9004:9000"
    environment:
      MINIO_ACCESS_KEY: minio
      MINIO_SECRET_KEY: minio123
    command: server http://minio{1...4}/data{1...2}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3



    #   zookeeper:
    #     container_name: zookeeper
    #     image: wurstmeister/zookeeper
    #     volumes:
    #       - ./data:/data
    #     ports:
    #       - 2181:2181
    #     networks:
    #       - default
    #
    #   kafka:
    #     container_name: kafka
    #     image: wurstmeister/kafka
    #     ports:
    #       - 9092:9092
    #     environment:
    # KAFKA_CREATE_TOPICS: "Topic:1:1"   #kafka启动后初始化一个有2个partition(分区)0个副本名叫kafeidou的topic
    #       KAFKA_ADVERTISED_HOST_NAME: 192.168.1.104
    #       KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    #       KAFKA_ADVERTISED_PORT: 9092
    #  KAFKA_ADVERTISED_HOST_NAME: localhost
    # KAFKA_CREATE_TOPICS: "Topic1:1:1"
    #KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    #     volumes:
    #       - /var/run/docker.sock:/var/run/docker.sock
    #     links:
    #       - zookeeper
    #     networks:
    #       - default

    #kafka-manager:
    # image: sheepkiller/kafka-manager
    #ports:
    # - 9020:9000
    #environment:
    # ZK_HOSTS: zookeeper:2181



volumes:
  data1-1:
  data1-2:
  data2-1:
  data2-2:
  data3-1:
  data3-2:
  data4-1:
  data4-2:
